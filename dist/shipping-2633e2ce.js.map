{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/locale/withDate.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/ui/form/DynamicInput.tsx","webpack://checkout/./src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/payment/getPreselectedPayment.ts","webpack://checkout/./src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./src/app/address/AddressFormModal.tsx","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","AccordionContext","onToggle","TextArea","testId","state","getContextValue","selectedItemId","handleToggleItem","props","isDisabled","onSelect","setState","render","this","children","defaultSelectedItemId","Provider","value","ChecklistContext","undefined","connectFormik","setFieldValue","name","handleSelect","contextValue","disabled","labelContent","onChange","renderField","field","checked","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","mapCustomFormFieldsFromFormValues","customFieldsObject","customFields","key","fieldValue","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","data","language","onClick","translatedString","translate","parsedString","length","href","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","addEventListener","removeEventListener","componentWillUnmount","placement","dropdown","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","Input","Label","date","fieldType","options","placeholder","inputFormat","handleDateChange","dateValue","target","DynamicFormFieldType","map","optionValue","radio","checkbox","Array","isArray","includes","autoComplete","calendarClassName","dateFormat","maxDate","max","Date","minDate","min","placeholderText","toUpperCase","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderProps","secret","fieldLabel","required","maxLength","parentFieldName","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","number","renderInput","items","helperLabel","rows","FormField","input","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","node","done","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","content","htmlId","Checklist","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","mapAddressFromFormValues","formValues","address","shouldSaveAddress","isEqualAddress","address1","address2","normalizeAddress","stateOrProvince","stateOrProvinceCode","isSameState","filter","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippableItemsCount","cart","getLineItemsCount","lineItems","physicalItems","item","addedByPromotion","getShippingMethodId","checkout","preselectedPayment","payments","find","payment","isGiftCertificatePayment","isStoreCreditPayment","providerId","getPreselectedPayment","ADDRESS_FIELD_IDS","postalCode","getAddressFormFieldLegacyName","getAddressFormFieldInputId","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","types","create","autocompleteData","addressSelector","getItemClassName","highlightedIndex","index","classes","join","instance","getItemProps","menuProps","stateReducer","changes","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","inputProps","initialValue","initialHighlightedIndex","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","slice","i","offset","notHighlightedLength","substr","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","_placesPromise","PlacesService","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","countryCode","supportedCountries","country","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","formFields","dateFormFieldNames","custom","componentDidMount","current","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","shouldShowSaveAddress","Fieldset","addressFieldName","translatedPlaceholderId","DynamicFormField","CheckboxFormField","withLanguage","SaveAddressForm","handleSubmit","onSaveAddress","mapPropsToValues","defaultCountryCode","validationSchema","getFields","getAddressFormFieldsValidationSchema","isLoading","onRequestClose","Form","LoadingOverlay","Button","variant","Primary","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","consignment","lineItemIds","getShippableLineItems","concat","lineItemIndex","splitItems","quantity","variantId","productId","splitItem","handleSelectAddress","newAddress","onSelectAddress","handleUseNewAddress","selectedAddress","onUseNewAddress","addresses","role","DropdownTrigger","AddressSelectMenu","AddressSelectButton","StaticAddress","imageUrl","alt","src","optionName","nameId","shippingAddress","renderLabel","hidden","legend","Legend","ShippingOptionListItem","consignmentId","shippingOption","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","selectDefaultShippingOptions","selectShippingOption","getConsignments","selectedShippingOption","availableShippingOptions","recommendedOption","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","subscribeToConsignments","unsubscribe","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","sort","a","b","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","StaticConsignmentItemList","shippingOptionIds","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Alert","ShippingOptions","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","newId","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","formFieldName","handleAutocompleteToggle","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","customerAddress","isValidCustomerAddress","unmountContentWhenLoading","buttonId","customFormFields","shouldShowCustomFormFields","padding","size","Tiny","Secondary","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","initializeShipping","defaultOptions","amazon","container","onError","amazonpay","editAddressButtonId","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","includeShippingOptions","include","addressForm","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","getCustomFormFieldsValidationSchema","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","onMultiShippingChange","shouldShowMultiShipping","handleSingleShippingSubmit","addressValues","updateCheckout","updateShippingAddress","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","some","unassignItem","location","handleMultiShippingSubmit","isInitializing","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","onToggleMultiShipping","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress"],"mappings":"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","file":"shipping-2633e2ce.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                disabled={ disabled }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        disabled,\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(\n    customFieldsObject: { [id: string]: any }\n): Array<{fieldId: string; fieldValue: string}> {\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback((dateValue, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: dateValue,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                dateFormat={ inputFormat }\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText={ inputFormat.toUpperCase() }\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        remove,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        { options.length > 1 && <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        /> }\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { label || fieldLabel }\n            { !required &&\n                <>\n                    { ' ' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        fieldInputId,\n        fieldLabel,\n        required,\n        label,\n    ]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ autocomplete }\n            fieldType={ dynamicFormFieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        fieldInputId,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n        dynamicFormFieldType,\n        autocomplete,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field ${extraClass}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ labelComponent }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    ) && isSameState(address1, address2);\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (address1.stateOrProvinceCode && address1.stateOrProvinceCode === address2.stateOrProvinceCode) {\n        return true;\n    }\n\n    return address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode;\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(payment =>\n        !isGiftCertificatePayment(payment)\n        && !isStoreCreditPayment(payment)\n        && !!payment.providerId\n    );\n}\n","import { AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField } from '../../ui/form';\nimport { getAddressFormFieldInputId } from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getAddressFormFieldInputId(name),\n    }), [name]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                labelContent={ labelContent }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, DynamicFormField, DynamicFormFieldType, Fieldset } from '../ui/form';\n\nimport { AddressKeyMap } from './address';\nimport { getAddressFormFieldInputId, getAddressFormFieldLegacyName } from './getAddressFormFieldInputId';\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport './AddressForm.scss';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    shouldShowSaveAddress?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n            shouldShowSaveAddress,\n        } = this.props;\n\n        return (<>\n            <Fieldset>\n                <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                    { formFields.map(field => {\n                        const addressFieldName = field.name;\n                        const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                        if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                            return (\n                                <GoogleAutocompleteFormField\n                                    apiKey={ googleMapsApiKey }\n                                    countryCode={ countryCode }\n                                    field={ field }\n                                    key={ field.id }\n                                    nextElement={ this.nextElement || undefined }\n                                    onChange={ this.handleAutocompleteChange }\n                                    onSelect={ this.handleAutocompleteSelect }\n                                    onToggleOpen={ onAutocompleteToggle }\n                                    parentFieldName={ fieldName }\n                                    supportedCountries={ countriesWithAutocomplete }\n                                />\n                            );\n                        }\n\n                        return (\n                            <DynamicFormField\n                                autocomplete={ AUTOCOMPLETE[field.name] }\n                                extraClass={ `dynamic-form-field--${getAddressFormFieldLegacyName(addressFieldName)}` }\n                                field={ field }\n                                inputId={ getAddressFormFieldInputId(addressFieldName) }\n                                // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                key={ `${field.id}-${field.name}` }\n                                label={ field.custom ? field.label : <TranslatedString id={ LABEL[field.name] } /> }\n                                onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                                parentFieldName={ field.custom ?\n                                    (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                    fieldName }\n                                placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            />\n                        );\n                    }) }\n                </div>\n            </Fieldset>\n            { shouldShowSaveAddress &&\n                <CheckboxFormField\n                    labelContent={ <TranslatedString id=\"address.save_in_addressbook\" /> }\n                    name={ fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress' }\n                /> }\n        </>);\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\nimport AddressForm from './AddressForm';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={ isLoading }>\n            <AddressForm\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                countryCode={ values.countryCode }\n                formFields={ getFields(values.countryCode) }\n                googleMapsApiKey={ googleMapsApiKey }\n                setFieldValue={ setFieldValue }\n                shouldShowSaveAddress={ false }\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={ preventDefault(onRequestClose) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={ isLoading }\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n    handleSubmit: (values, { props: { onSaveAddress } }) => {\n        onSaveAddress(values);\n    },\n    mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n        firstName: '',\n        lastName: '',\n        address1: '',\n        address2: '',\n        customFields: {},\n        country: '',\n        countryCode: defaultCountryCode,\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        postalCode: '',\n        phone: '',\n        city: '',\n        company: '',\n        shouldSaveAddress: false,\n    }),\n    validationSchema: ({\n        language,\n        getFields,\n    }: AddressFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n})(SaveAddress));\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={ isOpen }\n        onAfterOpen={ onAfterOpen }\n        onRequestClose={ onRequestClose }\n        shouldShowCloseButton={ true }\n    >\n        <SaveAddressForm\n            { ...addressFormProps }\n            onRequestClose={ onRequestClose }\n        />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport './AddressSelect.scss';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={ addresses }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ this.handleUseNewAddress }\n                                selectedAddress={ selectedAddress }\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" /> }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string, key);\n    }, [\n        id,\n        onUseNewAddress,\n        key,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete={ 'off' }\n            maxLength={ 2000 }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset legend={ legend } testId=\"checkout-shipping-comments\">\n        <FormField\n            input={ renderInput }\n            label={ renderLabel }\n            name=\"orderComment\"\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .slice(0, isMultiShippingMode ? undefined : 1)\n                .sort((a, b) => (a.id > b.id ? -1 : 1))\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nfunction mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            { shouldShowOrderComments &&\n                <OrderComments /> }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, AddressRequestBody, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { Fragment, PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress, mapAddressFromFormValues, AddressFormModal, AddressFormValues } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { withLanguage, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={ onCreateAccount }\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Fragment>\n                <ErrorModal\n                    error={ createCustomerAddressError }\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />\n                            { ' ' }\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={ this.handleCloseErrorModal }\n                    shouldShowErrorCode={ false }\n                />\n                { <AddressFormModal\n                    countries={ countries }\n                    countriesWithAutocomplete={ countriesWithAutocomplete }\n                    defaultCountryCode={ defaultCountryCode }\n                    getFields={ getFields }\n                    googleMapsApiKey={ googleMapsApiKey }\n                    isLoading={ isLoading }\n                    isOpen={ !!itemAddingAddress }\n                    onRequestClose={ this.handleCloseAddAddressForm }\n                    onSaveAddress={ this.handleSaveAddress }\n                /> }\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        { items.map(item => (\n                            <li key={ item.key }>\n                                <ItemAddressSelect\n                                    addresses={ addresses }\n                                    item={ item }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                />\n                            </li>\n                        )) }\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={ cartHasChanged }\n                        isLoading={ isLoading }\n                        isMultiShippingMode={ true }\n                        shouldDisableSubmit={ this.shouldDisableSubmit() }\n                        shouldShowOrderComments={ shouldShowOrderComments }\n                        shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                    />\n                </Form>\n            </Fragment>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async address => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(shippingAddress, itemAddingAddress.itemId, itemAddingAddress.key);\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (e) {\n            this.setState({ createCustomerAddressError: e });\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (address, itemId, itemKey) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if (newId && !cartItemIds.includes(item.id) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        } else {\n            return item;\n        }\n    });\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <DynamicFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <DynamicFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        isShippingStepPending={ isShippingStepPending }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\n                    />\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress, isBillingSameAsShipping, customerMessage }) => ({\n        billingSameAsShipping: isBillingSameAsShipping,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getCustomFormFieldsValidationSchema({\n                    translate: getTranslateAddressError(language),\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }) :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, AddressRequestBody, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                createCustomerAddress={ createCustomerAddress }\n                customerMessage={ customerMessage }\n                defaultCountryCode={ shippingAddress?.countryCode }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onCreateAccount={ onCreateAccount }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowAddAddressInCheckout={ shouldShowAddAddressInCheckout }\n                shouldShowOrderComments={ shouldShowOrderComments }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isBillingSameAsShipping={ isBillingSameAsShipping }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, AddressRequestBody, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ onToggleMultiShipping }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isBillingSameAsShipping = { isBillingSameAsShipping }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        shouldShowSaveAddress={ !isGuest }\n                        updateAddress={ updateShippingAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress = !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout: features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"sourceRoot":""}